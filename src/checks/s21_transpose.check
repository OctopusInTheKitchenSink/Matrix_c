#include "../s21_matrix.h"

#test test1
matrix_t C;
int res = s21_transpose(NULL, &C);
ck_assert_int_eq(res, 1);

#test test2
matrix_t A, C;
A.rows = 0, A.columns = 3;
int res = s21_transpose(&A, &C);
ck_assert_int_eq(res, 1);

#test test3
matrix_t A, C;
A.rows = 3, A.columns = 0;
int res = s21_transpose(&A, &C);
ck_assert_int_eq(res, 1);

#test test4
matrix_t A, C;
s21_create_matrix(3, 3, &A);
double buf[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9}, result[9] = {1, 4, 7, 2, 5, 8, 3, 6, 9};
int counter = 0;
for(int i = 0; i < 3; i++)
	for(int j = 0; j < 3; ++j)
		A.matrix[i][j] = buf[counter++];
int res = s21_transpose(&A, &C);
counter = 0;
for(int i = 0; i < 3; i++){
	for(int j = 0; j < 3; ++j)
		ck_assert_int_eq(C.matrix[i][j], result[counter++]);
}
s21_remove_matrix(&A);
s21_remove_matrix(&C);
ck_assert_int_eq(0, res);

#test test5
matrix_t A, C;
s21_create_matrix(7, 7, &A);
double m1[49] = {1, 0, -1, 2, 3, 1, -2, 0, -3, 2, 3, 1, -2, 1, -1, 3, 2, 4, 1, 0, -2, 3, 2, 1, 0, -1, -2, -1, 0, 1, -1, 0, -1, 1, 0, 2, 2, 1, 1, 0, 0, 3, -3, -2, -1, 0, 1, 2, 3},
result[49] = {1, 0, -1, 3, 0, 2, -3, 0, -3, 3, 2, 1, 2, -2, -1, 2, 2, 1, -1, 1, -1, 2, 3, 4, 0, 0, 1, 0, 3, 1, 1, -1, -1, 0, 1, 1, -2, 0, -2, 1, 0, 2, -2, 1, -2, -1, 0, 3, 3};
int counter = 0;
for(int i = 0; i < 7; ++i)
	for(int j = 0; j < 7; ++j)
		A.matrix[i][j] = m1[counter++];
int res = s21_transpose(&A, &C);
ck_assert_int_eq(0, res);
counter = 0;
for(int i = 0; i < 7; ++i)
	for(int j = 0; j < 7; ++j)
		ck_assert_double_eq(result[counter++], C.matrix[i][j]);
s21_remove_matrix(&A);
s21_remove_matrix(&C);

#test test6
matrix_t A, C;
s21_create_matrix(1, 1, &A);
A.matrix[0][0] = 0.001;
int res = s21_transpose(&A, &C);
ck_assert_int_eq(0, res);
ck_assert_double_eq(C.matrix[0][0], 0.001);
s21_remove_matrix(&A);
s21_remove_matrix(&C);

#test test7
matrix_t A, C;
s21_create_matrix(2, 2, &A);
double m1[4] = {0.01, 0.2, 1, 2.1}, result[4] = {0.01, 1, 0.2, 2.1};
int counter = 0;
for(int i = 0; i < 2; ++i)
	for(int j = 0; j < 2; ++j)
		A.matrix[i][j] = m1[counter++];
int res = s21_transpose(&A, &C);
ck_assert_int_eq(0, res);
counter = 0;
for(int i = 0; i < 2; ++i)
	for(int j = 0; j < 2; ++j)
		ck_assert_double_eq(C.matrix[i][j], result[counter++]);