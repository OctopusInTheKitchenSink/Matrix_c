#include "../s21_matrix.h"

#test test1
matrix_t A, C;
s21_create_matrix(2, 3, &A);
int res = s21_sub_matrix(&A, NULL, &C);
s21_remove_matrix(&A);
ck_assert_int_eq(res, 1);

#test test2
matrix_t A, C;
s21_create_matrix(2, 3, &A);
int res = s21_sub_matrix(NULL, &A, &C);
s21_remove_matrix(&A);
ck_assert_int_eq(res, 1);

#test test3
matrix_t C;
int res = s21_sub_matrix(NULL, NULL, &C);
ck_assert_int_eq(res, 1);

#test test4
matrix_t A, B, C;
s21_create_matrix(2, 3, &A);
s21_create_matrix(3, 3, &B);
double buff[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
int counter = 0;
for(int i = 0; i < 2; ++i)
	for(int j = 0; j < 3; ++j)
		A.matrix[i][j] = buff[counter++];
counter = 0;
for(int i = 0; i < 3; ++i)
	for(int j = 0; j < 3; ++j)
		B.matrix[i][j] = buff[counter++];
int res = s21_sub_matrix(&A, &B, &C);
s21_remove_matrix(&A);
s21_remove_matrix(&B);
ck_assert_int_eq(res, 2);

#test test5
matrix_t A, B, C;
s21_create_matrix(2, 3, &A);
s21_create_matrix(3, 3, &B);
double buff[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
int counter = 0;
for(int i = 0; i < 2; ++i)
	for(int j = 0; j < 3; ++j)
		A.matrix[i][j] = buff[counter++];
counter = 0;
for(int i = 0; i < 3; ++i)
	for(int j = 0; j < 3; ++j)
		B.matrix[i][j] = buff[counter++];
int res = s21_sub_matrix(&B, &A, &C);
s21_remove_matrix(&A);
s21_remove_matrix(&B);
ck_assert_int_eq(res, 2);

#test test6
matrix_t A, B, C;
s21_create_matrix(3, 3, &A);
s21_create_matrix(3, 3, &B);
double buff[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9}, result[9] = {0};
int counter = 0;
for(int i = 0; i < 3; ++i)
	for(int j = 0; j < 3; ++j){
		A.matrix[i][j] = buff[counter];
		B.matrix[i][j] = buff[counter++];
	}
counter = 0;
int res = s21_sub_matrix(&B, &A, &C);
for(int i = 0; i < 3; ++i)
	for(int j = 0; j < 3; ++j)
		ck_assert_int_eq(C.matrix[i][j], result[counter++]);
s21_remove_matrix(&A);
s21_remove_matrix(&B);
s21_remove_matrix(&C);
ck_assert_int_eq(res, 0);

#test test7
matrix_t A, B, C;
A.rows = 0, A.columns = 3;
B.rows = 0, B.columns = 3;
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(res, 1);

#test test8
matrix_t A, B, C;
s21_create_matrix(1, 1, &A);
s21_create_matrix(1, 1, &B);
A.matrix[0][0] = 1, B.matrix[0][0] = 1;
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(res, 0);
ck_assert_int_eq(C.matrix[0][0], 0);
s21_remove_matrix(&A);
s21_remove_matrix(&B);
s21_remove_matrix(&C);

#test test9
matrix_t A, B, C;
s21_create_matrix(100, 1, &A);
s21_create_matrix(100, 1, &B);
double result[100];
for(int i = 0; i < 100; ++i){
	A.matrix[i][0] = i * 5.098 - 4;
	B.matrix[i][0] = i / 3 + 12;
	result[i] = (i * 5.098 - 4) - (i / 3 + 12);
}
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(res, 0);
for(int i = 0; i < 100; ++i)
	ck_assert_double_eq(C.matrix[i][0], result[i]);
s21_remove_matrix(&A);
s21_remove_matrix(&B);
s21_remove_matrix(&C);

#test test10
matrix_t A, B, C;
s21_create_matrix(1, 100, &A);
s21_create_matrix(1, 100, &B);
double result[100];
for(int j = 0; j < 100; ++j){
	A.matrix[0][j] = j * 5.098 - 4;
	B.matrix[0][j] = j / 3 + 12;
	result[j] = (j * 5.098 - 4) - (j / 3 + 12);
}
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(res, 0);
for(int j = 0; j < 100; ++j)
	ck_assert_double_eq(C.matrix[0][j], result[j]);
s21_remove_matrix(&A);
s21_remove_matrix(&B);
s21_remove_matrix(&C);

#test test11
matrix_t A, B, C;
s21_create_matrix(100, 100, &A);
s21_create_matrix(100, 100, &B);
for(int i = 0; i < 100; ++i)
	for(int j = 0; j < 100; ++j){
		A.matrix[i][j] = j + 0.12345;
		B.matrix[i][j] = j - 0.12345;
	}
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(res, 0);
for(int i = 0; i < 100; ++i)
	for(int j = 0; j < 100; ++j)
		ck_assert_double_eq_tol(C.matrix[i][j], 0.2469, 1e-4);
s21_remove_matrix(&A);
s21_remove_matrix(&B);
s21_remove_matrix(&C);

#test test12
matrix_t A, B, C;
A.rows = 1, A.columns = 2, B.rows = 2, B.columns = 2;
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(2, res);

#test test13
matrix_t A, B, C;
A.rows = 2, A.columns = 1, B.rows = 2, B.columns = 2;
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(2, res);

#test test14
matrix_t A, B, C;
A.columns = 0, A.rows = 1, B.columns = 1, B.rows = 1;
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(2, res);

#test test15
matrix_t A, B, C;
A.columns = 1, A.rows = 0, B.columns = 1, B.rows = 1;
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(2, res);

#test test16
matrix_t A, B, C;
A.columns = 1, A.rows = 1, B.columns = 0, B.rows = 1;
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(2, res);

#test test17
matrix_t A, B, C;
A.columns = 1, A.rows = 1, B.columns = 1, B.rows = 0;
int res = s21_sub_matrix(&A, &B, &C);
ck_assert_int_eq(2, res);