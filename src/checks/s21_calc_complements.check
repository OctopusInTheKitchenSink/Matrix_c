#include "../s21_matrix.h"

#test test1
matrix_t C;
int res = s21_calc_complements(NULL, &C);
ck_assert_int_eq(res, 1);

#test test2
matrix_t A, C;
A.rows = 0, A.columns = 2;
int res = s21_calc_complements(&A, &C);
ck_assert_int_eq(res, 1);

#test test3
matrix_t A, C;
A.rows = 2, A.columns = 0;
int res = s21_calc_complements(&A, &C);
ck_assert_int_eq(res, 1);

#test test4
matrix_t A, C;
s21_create_matrix(2, 3, &A);
int res = s21_calc_complements(&A, &C);
s21_remove_matrix(&A);
ck_assert_int_eq(res, 2);

#test test5
matrix_t A, C;
s21_create_matrix(5, 5, &A);
double buff[25] = {1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5};//{0, 3, -1, 2, 2, 1, 0, 0, -2, -1, 0, 2, -5, 7, 1, 1};
int counter = 0;
for(int i = 0; i < 5; ++i)
	for(int j = 0; j < 5; ++j)
		A.matrix[i][j] = buff[counter++];
int res = s21_calc_complements(&A, &C);
for(int i = 0; i < 5; ++i){
	for(int j = 0; j < 5; ++j)
		ck_assert_int_eq(0, C.matrix[i][j]);
}
s21_remove_matrix(&C);
s21_remove_matrix(&A);
ck_assert_int_eq(0, res);

#test test6
matrix_t A, C;
s21_create_matrix(3, 3, &A);
double m1[9] = {5, -1, 1, 2, 3, 4, 1, 0, 3}, 
result[9] = {9, -2, -3, 3, 14, -1, -7, -18, 17};
int counter = 0;
for(int i = 0; i < 3; ++i)
	for(int j = 0; j < 3; ++j)
		A.matrix[i][j] = m1[counter++];
int res = s21_calc_complements(&A, &C);
ck_assert_int_eq(res, 0);
counter = 0;
for(int i = 0; i < 3; ++i)
	for(int j = 0; j < 3; ++j)
		ck_assert_double_eq(C.matrix[i][j], result[counter++]);
s21_remove_matrix(&A);
s21_remove_matrix(&C);

#test test7
matrix_t A, C;
s21_create_matrix(5, 5, &A);
int counter = 0;
double m1[25] = {1, 2, 3, 4, 5, -1, 0, 2, 3, 1, -2, 1, 1, -1, -3, -1, 2, -2, -3, 0, 5, 4, 3, 2, 1}, 
result[25] = {-15, -70, 197, -173, 110, -48, 168, -330, 348, -138, -30, -42, 198, -150, 24, -36, 126, -174, 114, -30, 33, 56, -61, 67, -46};
for(int i = 0; i < 5; ++i)
	for(int j = 0; j < 5; ++j)
		A.matrix[i][j] = m1[counter++];
counter = 0;
int res = s21_calc_complements(&A, &C);
ck_assert_int_eq(res, 0);
for(int i = 0; i < 5; ++i)
	for(int j = 0; j < 5; ++j)
		ck_assert_double_eq(result[counter++], C.matrix[i][j]);
s21_remove_matrix(&A);
s21_remove_matrix(&C);

#test test8
matrix_t A, C;
s21_create_matrix(4, 4, &A);
int counter = 0;
double m1[16] = {12, 11, 10, 9, 1, 2, 3, 1, -1, -2, 0, 4, 4, 3, 2, 1}, 
result[16] = {22, -41, 25, -15, -16, 56, -64, 24, -24, 48, -24, 0, -86, 121, -65, 39};
for(int i = 0; i < 4; ++i)
	for(int j = 0; j < 4; ++j)
		A.matrix[i][j] = m1[counter++];
counter = 0;
int res = s21_calc_complements(&A, &C);
ck_assert_int_eq(0, res);
for(int i = 0; i < 4; ++i)
	for(int j = 0; j < 4; ++j)
		ck_assert_double_eq(result[counter++], C.matrix[i][j]);
s21_remove_matrix(&A);
s21_remove_matrix(&C);

#test test9
matrix_t A, C;
s21_create_matrix(3, 3, &A);
int counter = 0;
double m1[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9}, 
result[9] = {-3, 6, -3, 6, -12, 6, -3, 6, -3};
for(int i = 0; i < 3; ++i)
	for(int j = 0; j < 3; ++j)
		A.matrix[i][j] = m1[counter++];
counter = 0;
int res = s21_calc_complements(&A, &C);
ck_assert_int_eq(0, res);
for(int i = 0; i < 3; ++i)
	for(int j = 0; j < 3; ++j)
		ck_assert_double_eq(result[counter++], C.matrix[i][j]);
s21_remove_matrix(&A);
s21_remove_matrix(&C);

#test test10
matrix_t A, C;
s21_create_matrix(2, 2, &A);
int counter = 0;
double m1[4] = {0, 1, 1, 0}, 
result[4] = {0, -1, -1, 0};
for(int i = 0; i < 2; ++i)
	for(int j = 0; j < 2; ++j)
		A.matrix[i][j] = m1[counter++];
counter = 0;
int res = s21_calc_complements(&A, &C);
ck_assert_int_eq(0, res);
for(int i = 0; i < 2; ++i)
	for(int j = 0; j < 2; ++j)
		ck_assert_double_eq(result[counter++], C.matrix[i][j]);
s21_remove_matrix(&A);
s21_remove_matrix(&C);

#test test11
matrix_t A, C;
s21_create_matrix(1, 1, &A);
A.matrix[0][0] = 0.001;
int res = s21_calc_complements(&A, &C);
ck_assert_int_eq(0, res);
ck_assert_double_eq(C.matrix[0][0], A.matrix[0][0]);
s21_remove_matrix(&A);
s21_remove_matrix(&C);